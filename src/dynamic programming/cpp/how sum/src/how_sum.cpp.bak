#include "how_sum.h"
#include <functional>
#include <unordered_map>

std::vector<unsigned int>
howSumBasic(const unsigned int target,
            const std::vector<unsigned int> &numbers) {


  std::function<std::vector<std::vector<unsigned int>>>(
    const unsigned int,
            const std::vector<unsigned int> &)>
      _howSumBasic;
  _howSumBasic = [&](const unsigned int target,
            const std::vector<unsigned int> &numbers)
      -> std::vector<std::vector<unsigned int>> {


  if (target == 0)
    return {{}};

  for (const auto &num : numbers) {

    if (num > target)
      return {};

    auto remainder = target - num;
    if (remainder >= 0) {
      auto combination = _howSumBasic(remainder, numbers);

      if (!combination.empty()) {
        combination[0].push_back(num);
        return combination;
      }
    }
  }

  return {};
  };  

  auto result = _howSumBasic(target, numbers);

  if (!result.empty())
       return result.front();


    return {};
}


/*
std::vector<unsigned int> howSumMemo(const unsigned int target,
                                     const std::vector<unsigned int> &numbers) {

  std::function<std::vector<unsigned int>(
      const unsigned int &, const std::vector<unsigned int> &,
      std::unordered_map<unsigned int, bool> &)>
      _howSumMemo;
  _howSumMemo = [&](const unsigned int target,
                    const std::vector<unsigned int> &numbers,
                    std::unordered_map<unsigned int, bool> &memo)
      -> std::vector<unsigned int> {
    if (target == 0)
      return true;

    if (memo.count(target))
      return memo[target];

    for (const auto &num : numbers) {

      if (num > target)
        return {};

      auto remainder = target - num;

      auto combination = howSumBasic(remainder, numbers);

      if (combination) {
        memo[target] = true;
        return true;
      }
    }

    memo[target] = false;
    return {};
  };

  std::unordered_map<unsigned int, bool> memo;

  return _howSumMemo(target, numbers, memo);
}

std::vector<unsigned int> howSumTable(const unsigned int target,
                                      std::vector<unsigned int> numbers) {

  std::vector<bool> table(target + 1, false);
  table[0] = true;

  for (int i = 0; i < target; i++) {

    if (table[i]) {

      auto it = numbers.begin();
      while (it != numbers.end()) {

        if (i + *it <= target)
          it++;

        else
          it = numbers.erase(it);
      }

      for (const auto &number : numbers) {
        if (i + number > 0 && i + number <= target)
          table[i + number] = true;
      }
    }
  }

  return table.back();
}*/
